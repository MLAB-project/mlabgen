#!/usr/bin/env python
# -*- coding: utf-8 -*-


import sys
import os
import subprocess
import pcbnew
from pcbnew import FromMM, wxPoint
from pcbnew import PLOT_FORMAT_GERBER, PLOT_FORMAT_SVG, PLOT_FORMAT_PDF, PLOT_CONTROLLER, EXCELLON_WRITER
from pcbnew import F_Cu, B_Cu, B_SilkS, F_SilkS, B_Mask, F_Mask, Edge_Cuts, B_Paste, F_Paste

import kicad_netlist_reader
import csv
import sys

import sqlite3
import numpy as np
import csv, json

localpath = os.getcwd()
rootpath, project = os.path.split(localpath)



if not os.path.exists('doc/src/'):  # create the build directory if not existing
    os.makedirs('doc/src')


filename= os.path.join(localpath, 'hw', 'sch_pcb', project+'.kicad_pcb')

print "soucastna cesta:", localpath
print "Soubor projektu:", filename
plotDir = "../cam_profi/"

board = pcbnew.LoadBoard(filename)
pctl = pcbnew.PLOT_CONTROLLER(board)

popt = pctl.GetPlotOptions()

popt.SetOutputDirectory(plotDir)

popt.SetPlotFrameRef(False) 
popt.SetLineWidth(FromMM(0.35))

popt.SetAutoScale(False)
popt.SetScale(1)
popt.SetMirror(False)
popt.SetUseGerberAttributes(True)
popt.SetUseGerberProtelExtensions(False)
popt.SetExcludeEdgeLayer(True);
popt.SetScale(1)
popt.SetUseAuxOrigin(True)

popt.SetSubtractMaskFromSilk(False)



plot_plan = [
    ( "F.Cu", F_Cu, "Top layer" ),
    ( "B.Cu", B_Cu, "Bottom layer" ),
    ( "F.SilkS", F_SilkS, "Silk top" ),
    ( "B.Mask", B_Mask, "Mask bottom" ),
    ( "F.Mask", F_Mask, "Mask top" ),
    ( "Edge.Cuts", Edge_Cuts, "Edges" ),
]

print "zacatek generovani"

for layer_info in plot_plan:
    pctl.SetLayer(layer_info[1])
    pctl.OpenPlotfile(layer_info[0], PLOT_FORMAT_GERBER, layer_info[2])
    pctl.PlotLayer()


drlwriter = EXCELLON_WRITER( board )
drlwriter.SetMapFileFormat( PLOT_FORMAT_GERBER )

mirror = False
minimalHeader = False
offset = wxPoint(0,0)

mergeNPTH = False
drlwriter.SetOptions( mirror, minimalHeader, offset, mergeNPTH)

metricFmt = True
drlwriter.SetFormat( metricFmt )

genDrl = True
genMap = False
drlwriter.CreateDrillandMapFilesSet( pctl.GetPlotDirName(), genDrl, genMap );



popt = pctl.GetPlotOptions()

popt.SetOutputDirectory("../../doc/src/")

popt.SetPlotFrameRef(False)
popt.SetLineWidth(FromMM(0.2))

popt.SetAutoScale(False)
popt.SetScale(1)
popt.SetMirror(False)
popt.SetUseGerberAttributes(True)
popt.SetExcludeEdgeLayer(False);
popt.SetUseAuxOrigin(False)

popt.SetSubtractMaskFromSilk(False)


pctl.OpenPlotfile("top", PLOT_FORMAT_PDF, "MLAB A")
pctl.SetLayer(F_SilkS)
pctl.PlotLayer()
#pctl.SetLayer(F_Mask)
#pctl.PlotLayer()


popt.SetMirror(True)
pctl.OpenPlotfile("bottom", PLOT_FORMAT_PDF, "MLAB A")
pctl.SetLayer(B_SilkS)
pctl.PlotLayer()

pctl.ClosePlot()


os.chdir('doc/src/')
print subprocess.Popen(['pdf-crop-margins','-ap','10','-p','0',project+'-top.pdf']).wait()
print subprocess.Popen(['pdf-crop-margins','-ap','10','-p','0',project+'-bottom.pdf']).wait()
os.chdir('../..')


print("+++++++++++++++++++++++++++++++")




##
##
##COMP
## ---package
##    ---value
##       [label]
##
##
# takto nejak by mela vypadat struktura
#"JUMP_2x1": {
#        "Mlab_Pin_Headers:Straight_1x02": {
#            "JUMP_2x1": [
#                "J10", 
#                "J11", 
#                "J9", 
#                "J12", 
#                "J13"
#            ]
#        }
#    }, 
#    "D_ZENER": {
#        "Mlab_D:Diode-MiniMELF_Standard": {
#            "BZV55C-5,6V": [
#                "D1"
#            ]
#        }
#    }, 
#    "SHT31": {
#        "Mlab_IO:DFN-8-1EP_2.4x2.4mm_Pitch0.5mm": {
#            "SHT31": [
#                "U1"
#            ]
#        }
#    }, 


filename= os.path.join(localpath, 'hw', 'sch_pcb', project+'.sch')
sch = open(filename, 'r').read()
sch_parts = sch.split("$")
comp = {}

for area in sch_parts:
    #print(area)
    if area[:4] == 'Comp':
        lines = area.split('\n')
        print(lines)
        compo=lines[1].split(" ")[1]
        label=lines[1].split(" ")[2]
        value=lines[5].split('"')[1]
        packa=lines[6].split('"')[1]

        if '#' not in label:
            print(label)
            try:
                packa = packa.split(":")[1]
            except Exception as e:
                pass
            if not compo in comp:
                comp[compo] = {}
            if not packa in comp[compo]:
                comp[compo][packa] = {}
            if not value in comp[compo][packa]:
                comp[compo][packa][value] = []

            comp[compo][packa][value] += [label]

import csv
with open('hw/bom_base.csv', "wb") as csv_file:
        writer = csv.writer(csv_file, delimiter=';')
        for c in comp:
            for p in comp[c]:
                for v in comp[c][p]:
                    print(c, p, v, comp[c][p][v])
                    writer.writerow([c, p, v, comp[c][p][v]])

print(json.dumps(comp, indent=4))
'''
conn = sqlite3.connect('example.db')
try:
    conn.execute('DROP TABLE parts')
except Exception, e:
    pass
conn.execute('CREATE TABLE parts (name text, package text, value text, fingerprint text)')
conn.commit()


filename= os.path.join(localpath, 'hw', 'sch_pcb', project+'.sch')

sch = open(filename, 'r').read()
sch_parts = sch.split("$")


for area in sch_parts:
    if area[:4] == 'Comp':
        try:
            comp = area
            comp = comp.replace('F 0', 'F_0')
            comp = comp.replace('F 1', 'F_1')
            comp = comp.replace('F 2', 'F_2')
            comp = comp.replace('F 3', 'F_3')
            comp = comp.replace('\r\n', ' ')
            comp = comp.replace('  ', ' ')
            comp = comp.replace('  ', ' ')
            comp = comp.split(' ')
            #print comp
            Cname = comp[comp.index('L')+2]
            Cvalue= comp[comp.index('F_1')+1]
            Cpackage= comp[comp.index('F_2')+1]
            print ">>", Cname, Cvalue, Cpackage
            if not "#" in Cname:
                conn.execute("INSERT INTO parts VALUES ('%s', '%s', '%s', '%s')" %(Cname, Cpackage.replace('"', ''), Cvalue.replace('"', ''), ""))
        except Exception, e:
            print e


mydt = np.dtype([('name', np.str_, 5), 
                 ('package', np.str_, 20),
                 ('value', np.str_, 10),
                 ('fingerprint', np.str_, 10)] )

array = conn.execute("select min(name), package, count(*), value FROM parts GROUP BY package;").fetchall()
print array

with open(pctl.GetPlotDirName()+'../../NewBOM.csv', 'wb') as f:
    writer = csv.writer(f, delimiter=';', quotechar='"', quoting=csv.QUOTE_NONNUMERIC)
    for i, part in enumerate(array):
        print (i+1,)+part
        writer.writerow((i+1,)+part)


conn.commit()
'''